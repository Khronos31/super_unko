#!/bin/bash

set -eu

THIS_DIR=$(
  cd "$(dirname "${BASH_SOURCE:-$0}")" && pwd
)
readonly THIS_DIR

SCRIPT_NAME="$(basename "${BASH_SOURCE:-$0}")"
readonly SCRIPT_NAME

main() {
  if [[ $# -lt 1 ]]; then
    log "Must need sub command."
    usage >&2
    return 1
  fi

  local cmd="$1"
  shift

  case "$cmd" in
    help)
      usage
      return
      ;;
    *)
      local cmd_path
      local ret

      set +eu
      cmd_path="$(to_command_path "$cmd")"
      ret=$?
      if [[ "$ret" -eq 0 ]]; then
        "$cmd_path" "$@"
        return
      fi
      set -eu

      log "Illegal sub command. (cmd = $cmd)"
      usage >&2
      return 1
      ;;
  esac
}

usage() {
  cat << EOS
$SCRIPT_NAME is a master of unko.

About subcommands:
    $SCRIPT_NAME controles sub unkommands by own charisma.
    $SCRIPT_NAME can control them as unkommands if there are executables that
    called 'unko.*' or 'bigunko.*' in the same directory as $SCRIPT_NAME.

Available commands:
EOS
  local pad="    "
  echo "${pad}help"

  # bigunko.show系のを先に
  for cmd_fullpath in "$THIS_DIR/"bigunko*; do
    local cmd=${cmd_fullpath##*/}
    cmd=${cmd//unko./}
    echo "${pad}$cmd"
  done

  # unko.*系の
  for cmd_fullpath in "$THIS_DIR/"unko.*; do
    local cmd=${cmd_fullpath##*/*unko.}
    echo "${pad}$cmd"
  done
}

log() {
  echo -e "$SCRIPT_NAME: $*" 2>&1
}

## to_command_path はサブコマンド名からunkoコマンドのパスを得る
to_command_path() {
  local cmd="$1"

  for cmd_fullpath in "$THIS_DIR/bigunko".*; do
    local big_cmd=${cmd//big/bigunko.}
    local c=${cmd_fullpath##*/}
    if [[ "$c" = "$big_cmd" ]]; then
      echo "$cmd_fullpath"
      return
    fi
  done

  for cmd_fullpath in "$THIS_DIR/unko".*; do
    local c=${cmd_fullpath##*/unko.}
    if [[ "$c" = "$cmd" ]]; then
      echo "$cmd_fullpath"
      return
    fi
  done

  return 1
}

main ${1+"$@"}
exit $?
