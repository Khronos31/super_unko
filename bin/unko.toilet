#!/bin/bash

usage() {
  (
    echo "Usage: unko.toilet [ -hv ] [ -w outputwidth ]"
    echo "                   [ --crop ] [ --flip ] [ --flop ]"
    echo "                   [ --180 ] [ --left ] [ --right ]"
    echo "                   [ --border ] [ message ]"
    echo ""
    echo "  -h, --help                  このヘルプを出力して終了します"
    echo "  -w, --width <width, auto>   出力の幅です。autoを指定すると端末の幅になります"
    echo "      --crop                  上下左右の無駄なスペースを削除します"
    echo "      --flip                  水平方向に反転します"
    echo "      --flop                  垂直方向に反転します"
    echo "      --180                   180度回転します"
    echo "      --left                  左へ90度回転します"
    echo "      --right                 右へ90度回転します"
    echo "      --border                枠線をつけます"
    echo ""
  ) 1>&2
  exit 1
}

not_found() {
  echo "[ERR] $* not found  [unko.toilet]" 1>&2
  exit 1
}

append_opt() {
  toilet_opt=("${toilet_opt[@]}" "$@")
}

version() {
  echo "unko.toilet version 💩.💩.💩 (20💩💩/💩💩/💩💩)"
  exit 0
}

unexpected() {
  echo "[ERR] Unexpected $1" 1>&2
  echo "" 1>&2
  usage
}

# unko.toilet 用のオプションをパースする
declare -a args
declare -a toilet_opt
while (($# > 0)); do
  case "$1" in
    -*)
      # --help か -h が指定されていたらUsage出して終了
      [[ "$1" =~ ^(--help|-h)$ ]] && usage

      # --version か -v なら version情報を出力して終了
      [[ "$1" =~ ^(-v|--version)$ ]] && version

      : "-w|--width <width>" &&
        [[ "$1" =~ ^-(w|-width)$ ]] && {
        # widthの引数はint
        [[ "$2" =~ [0-9]+ ]] && {
          append_opt "--width $2"
        } || {
          # でも auto なら --termwidth を指定する
          [[ "$2" == "auto" ]] && append_opt "--termwidth"
        } || {
          # ダメ
          unexpected "argument $1 $2 <="
        }
        shift 2
        continue
      }

      : "Filter" &&
        [[ "$1" =~ ^--(left|right|flip|flop|180|border|crop)$ ]] && {
        append_opt "--filter ${1//--/}"
        shift
        continue
      }

      : "マッチしなかった" && unexpected "option $1"
      ;;
    *)
      # 引数
      args=("${args[@]}" "$1")
      shift
      ;;
  esac
done

# 第一引数に与えた文字を変換、デフォルト文字はうんこ
text=("${args[@]:-うんこ}")

# stdinから入力されてるならそっちを使う
[ -p /dev/stdin ] && text=("$(cat -)")

# toilet がなかったらダメ
type toilet &> /dev/null || not_found "toilet command"

# フォントにbigmono9を使うので無かったらダメ
echo | toilet -f bigmono9 &> /dev/null || not_found "bigmono9 font"

# unko.toilet
toilet "${toilet_opt[@]}" -f bigmono9 "${text[@]}" |
  # 薄いところは消す
  sed 's/░\|▒/ /g' |
  # スペース以外を💩へ
  sed 's/[^ ]/💩/g' |
  # 幅調整
  sed 's/ /  /g'
